// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

// [NEXT AUTH]

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  email         String?      @unique
  emailVerified DateTime?
  sessions      Session[]
  collections   Collection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// [OUR TABLES]

model Collection {
  id     String                @id @default(cuid())
  name   String
  userId String
  user   User                  @relation(fields: [userId], references: [id])
  videos VideosOnCollections[]
}

model VideosOnCollections {
  video        Video      @relation(fields: [videoId], references: [id])
  videoId      String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String

  @@id([videoId, collectionId])
}

model Video {
  // Properties from YouTube Data V3 API
  id                     String                @id
  title                  String
  description            String
  publishedAt            DateTime
  channelId              String
  channelTitle           String
  channel                Channel               @relation(fields: [channelId], references: [id])
  tags                   TagsOnVideos[]
  category               String
  is3D                   Boolean // contentDetails.dimension
  is360                  Boolean // contentDetails.projection
  isUnlisted             Boolean
  isCC                   Boolean // status.license
  isForKids              Boolean // status.madeForKids
  viewCount              Int?
  likeCount              Int?
  commentCount           Int?
  liveActualStartTime    DateTime?
  liveActualEndTime      DateTime?
  liveScheduledStartTime DateTime?
  liveScheduledEndTime   DateTime?
  // Properties from YT-DLP
  width                  Int?
  height                 Int?
  duration               Int?
  subtitles              String?
  filesize               Int?
  fps                    Int?
  isHDR                  Boolean?
  vcodec                 String?
  acodec                 String?
  // Meta properties
  lastUpdatedAt          DateTime
  collections            VideosOnCollections[]
}

model Tag {
  name   String         @id
  videos TagsOnVideos[]
}

model TagsOnVideos {
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String
  tag     Tag    @relation(fields: [tagId], references: [name])
  tagId   String

  @@id([videoId, tagId])
}

model Channel {
  id              String   @id
  title           String
  description     String
  publishedAt     DateTime
  customUrl       String?
  viewCount       Int
  subscriberCount Int
  videoCount      Int
  videos          Video[]
}
